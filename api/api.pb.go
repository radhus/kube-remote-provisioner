// Code generated by protoc-gen-go.
// source: api.proto
// DO NOT EDIT!

/*
Package api is a generated protocol buffer package.

TODO: can't we just use the protobuf definitions in k8s.io/.../v1 ?

It is generated from these files:
	api.proto

It has these top-level messages:
	ResourceRequirements
	ClaimSpec
	ClaimStatus
	Claim
	Volume
	NFSVolumeSource
	Source
	ProvisionRequest
	ProvisionResponse
	DeleteRequest
	DeleteResponse
*/
package api

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

// ReclaimPolicy matches
// k8s.io/client-go/pkg/api/v1.PersistentVolumeReclaimPolicy
type ReclaimPolicy int32

const (
	ReclaimPolicy_RECLAIM_POLICY_UNKNOWN ReclaimPolicy = 0
	ReclaimPolicy_RECYCLE                ReclaimPolicy = 1
	ReclaimPolicy_DELETE                 ReclaimPolicy = 2
	ReclaimPolicy_RETAIN                 ReclaimPolicy = 3
)

var ReclaimPolicy_name = map[int32]string{
	0: "RECLAIM_POLICY_UNKNOWN",
	1: "RECYCLE",
	2: "DELETE",
	3: "RETAIN",
}
var ReclaimPolicy_value = map[string]int32{
	"RECLAIM_POLICY_UNKNOWN": 0,
	"RECYCLE":                1,
	"DELETE":                 2,
	"RETAIN":                 3,
}

func (x ReclaimPolicy) String() string {
	return proto.EnumName(ReclaimPolicy_name, int32(x))
}
func (ReclaimPolicy) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

// AccessMode matches
// k8s.io/client-go/pkg/api/v1.PersistentAccessMode
type AccessMode int32

const (
	AccessMode_ACCCESS_MODE_UNKNOWN AccessMode = 0
	AccessMode_READ_WRITE_ONCE      AccessMode = 1
	AccessMode_READ_ONLY_MANY       AccessMode = 2
	AccessMode_READ_WRITE_MANY      AccessMode = 3
)

var AccessMode_name = map[int32]string{
	0: "ACCCESS_MODE_UNKNOWN",
	1: "READ_WRITE_ONCE",
	2: "READ_ONLY_MANY",
	3: "READ_WRITE_MANY",
}
var AccessMode_value = map[string]int32{
	"ACCCESS_MODE_UNKNOWN": 0,
	"READ_WRITE_ONCE":      1,
	"READ_ONLY_MANY":       2,
	"READ_WRITE_MANY":      3,
}

func (x AccessMode) String() string {
	return proto.EnumName(AccessMode_name, int32(x))
}
func (AccessMode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

// ClaimPhase matches
// k8s.io/client-go/pkg/api/v1.PersistentVolumeClaimPhase
type ClaimPhase int32

const (
	ClaimPhase_CLAIM_PHASE_UNKNOWN ClaimPhase = 0
	ClaimPhase_PENDING             ClaimPhase = 1
	ClaimPhase_BOUND               ClaimPhase = 2
	ClaimPhase_LOST                ClaimPhase = 3
)

var ClaimPhase_name = map[int32]string{
	0: "CLAIM_PHASE_UNKNOWN",
	1: "PENDING",
	2: "BOUND",
	3: "LOST",
}
var ClaimPhase_value = map[string]int32{
	"CLAIM_PHASE_UNKNOWN": 0,
	"PENDING":             1,
	"BOUND":               2,
	"LOST":                3,
}

func (x ClaimPhase) String() string {
	return proto.EnumName(ClaimPhase_name, int32(x))
}
func (ClaimPhase) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

// ResourceRequirements matches
// k8s.io/client-go/pkg/api/v1.ResourceRequirements
// The map is reduced to only handle ResourceStorage key, and values are bytes.
type ResourceRequirements struct {
	Limits   uint64 `protobuf:"varint,1,opt,name=limits" json:"limits,omitempty"`
	Requests uint64 `protobuf:"varint,2,opt,name=requests" json:"requests,omitempty"`
}

func (m *ResourceRequirements) Reset()                    { *m = ResourceRequirements{} }
func (m *ResourceRequirements) String() string            { return proto.CompactTextString(m) }
func (*ResourceRequirements) ProtoMessage()               {}
func (*ResourceRequirements) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *ResourceRequirements) GetLimits() uint64 {
	if m != nil {
		return m.Limits
	}
	return 0
}

func (m *ResourceRequirements) GetRequests() uint64 {
	if m != nil {
		return m.Requests
	}
	return 0
}

// ClaimSpec matches
// k8s.io/client-go/pkg/api/v1.PersistentVolumeClaimSpec
type ClaimSpec struct {
	AccessModes []AccessMode `protobuf:"varint,1,rep,packed,name=accessModes,enum=api.AccessMode" json:"accessModes,omitempty"`
	// TODO: handle Selector? reserving index 2 for that.
	Resources  *ResourceRequirements `protobuf:"bytes,3,opt,name=resources" json:"resources,omitempty"`
	VolumeName string                `protobuf:"bytes,4,opt,name=volumeName" json:"volumeName,omitempty"`
}

func (m *ClaimSpec) Reset()                    { *m = ClaimSpec{} }
func (m *ClaimSpec) String() string            { return proto.CompactTextString(m) }
func (*ClaimSpec) ProtoMessage()               {}
func (*ClaimSpec) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *ClaimSpec) GetAccessModes() []AccessMode {
	if m != nil {
		return m.AccessModes
	}
	return nil
}

func (m *ClaimSpec) GetResources() *ResourceRequirements {
	if m != nil {
		return m.Resources
	}
	return nil
}

func (m *ClaimSpec) GetVolumeName() string {
	if m != nil {
		return m.VolumeName
	}
	return ""
}

// ClaimStatus matches
// k8s.io/client-go/pkg/api/v1.PersistentVolumeClaimStatus
type ClaimStatus struct {
	Phase       ClaimPhase            `protobuf:"varint,1,opt,name=phase,enum=api.ClaimPhase" json:"phase,omitempty"`
	AccessModes []AccessMode          `protobuf:"varint,2,rep,packed,name=accessModes,enum=api.AccessMode" json:"accessModes,omitempty"`
	Capacity    *ResourceRequirements `protobuf:"bytes,3,opt,name=capacity" json:"capacity,omitempty"`
}

func (m *ClaimStatus) Reset()                    { *m = ClaimStatus{} }
func (m *ClaimStatus) String() string            { return proto.CompactTextString(m) }
func (*ClaimStatus) ProtoMessage()               {}
func (*ClaimStatus) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ClaimStatus) GetPhase() ClaimPhase {
	if m != nil {
		return m.Phase
	}
	return ClaimPhase_CLAIM_PHASE_UNKNOWN
}

func (m *ClaimStatus) GetAccessModes() []AccessMode {
	if m != nil {
		return m.AccessModes
	}
	return nil
}

func (m *ClaimStatus) GetCapacity() *ResourceRequirements {
	if m != nil {
		return m.Capacity
	}
	return nil
}

// Claim matches
// k8s.io/client-go/pkg/api/v1.PersistentVolumeClaim
type Claim struct {
	Spec   *ClaimSpec   `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	Status *ClaimStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *Claim) Reset()                    { *m = Claim{} }
func (m *Claim) String() string            { return proto.CompactTextString(m) }
func (*Claim) ProtoMessage()               {}
func (*Claim) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *Claim) GetSpec() *ClaimSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Claim) GetStatus() *ClaimStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// Volume matches
// k8s.io/client-go/pkg/api/v1.PersistentVolume
type Volume struct {
	Spec   *ClaimSpec   `protobuf:"bytes,1,opt,name=spec" json:"spec,omitempty"`
	Status *ClaimStatus `protobuf:"bytes,2,opt,name=status" json:"status,omitempty"`
}

func (m *Volume) Reset()                    { *m = Volume{} }
func (m *Volume) String() string            { return proto.CompactTextString(m) }
func (*Volume) ProtoMessage()               {}
func (*Volume) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *Volume) GetSpec() *ClaimSpec {
	if m != nil {
		return m.Spec
	}
	return nil
}

func (m *Volume) GetStatus() *ClaimStatus {
	if m != nil {
		return m.Status
	}
	return nil
}

// NFSVolumeSource matches
// k8s.io/client-go/pkg/api/v1.NFSVolumeSource
type NFSVolumeSource struct {
	Server   string `protobuf:"bytes,1,opt,name=server" json:"server,omitempty"`
	Path     string `protobuf:"bytes,2,opt,name=path" json:"path,omitempty"`
	ReadOnly bool   `protobuf:"varint,3,opt,name=readOnly" json:"readOnly,omitempty"`
}

func (m *NFSVolumeSource) Reset()                    { *m = NFSVolumeSource{} }
func (m *NFSVolumeSource) String() string            { return proto.CompactTextString(m) }
func (*NFSVolumeSource) ProtoMessage()               {}
func (*NFSVolumeSource) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *NFSVolumeSource) GetServer() string {
	if m != nil {
		return m.Server
	}
	return ""
}

func (m *NFSVolumeSource) GetPath() string {
	if m != nil {
		return m.Path
	}
	return ""
}

func (m *NFSVolumeSource) GetReadOnly() bool {
	if m != nil {
		return m.ReadOnly
	}
	return false
}

// Source matches
// k8s.io/client-go/pkg/api/v1.PersistentVolumeSource
type Source struct {
	// TODO: support anything else than NFS?
	//
	// Types that are valid to be assigned to Type:
	//	*Source_Nfs
	Type isSource_Type `protobuf_oneof:"type"`
}

func (m *Source) Reset()                    { *m = Source{} }
func (m *Source) String() string            { return proto.CompactTextString(m) }
func (*Source) ProtoMessage()               {}
func (*Source) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type isSource_Type interface {
	isSource_Type()
}

type Source_Nfs struct {
	Nfs *NFSVolumeSource `protobuf:"bytes,1,opt,name=nfs,oneof"`
}

func (*Source_Nfs) isSource_Type() {}

func (m *Source) GetType() isSource_Type {
	if m != nil {
		return m.Type
	}
	return nil
}

func (m *Source) GetNfs() *NFSVolumeSource {
	if x, ok := m.GetType().(*Source_Nfs); ok {
		return x.Nfs
	}
	return nil
}

// XXX_OneofFuncs is for the internal use of the proto package.
func (*Source) XXX_OneofFuncs() (func(msg proto.Message, b *proto.Buffer) error, func(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error), func(msg proto.Message) (n int), []interface{}) {
	return _Source_OneofMarshaler, _Source_OneofUnmarshaler, _Source_OneofSizer, []interface{}{
		(*Source_Nfs)(nil),
	}
}

func _Source_OneofMarshaler(msg proto.Message, b *proto.Buffer) error {
	m := msg.(*Source)
	// type
	switch x := m.Type.(type) {
	case *Source_Nfs:
		b.EncodeVarint(1<<3 | proto.WireBytes)
		if err := b.EncodeMessage(x.Nfs); err != nil {
			return err
		}
	case nil:
	default:
		return fmt.Errorf("Source.Type has unexpected type %T", x)
	}
	return nil
}

func _Source_OneofUnmarshaler(msg proto.Message, tag, wire int, b *proto.Buffer) (bool, error) {
	m := msg.(*Source)
	switch tag {
	case 1: // type.nfs
		if wire != proto.WireBytes {
			return true, proto.ErrInternalBadWireType
		}
		msg := new(NFSVolumeSource)
		err := b.DecodeMessage(msg)
		m.Type = &Source_Nfs{msg}
		return true, err
	default:
		return false, nil
	}
}

func _Source_OneofSizer(msg proto.Message) (n int) {
	m := msg.(*Source)
	// type
	switch x := m.Type.(type) {
	case *Source_Nfs:
		s := proto.Size(x.Nfs)
		n += proto.SizeVarint(1<<3 | proto.WireBytes)
		n += proto.SizeVarint(uint64(s))
		n += s
	case nil:
	default:
		panic(fmt.Sprintf("proto: unexpected type %T in oneof", x))
	}
	return n
}

// ProvisionRequest kind of matches
// github.com/kubernetes-incubator/nfs-provisioner/controller.VolumeOptions
type ProvisionRequest struct {
	ReclaimPolicy ReclaimPolicy `protobuf:"varint,1,opt,name=reclaimPolicy,enum=api.ReclaimPolicy" json:"reclaimPolicy,omitempty"`
	Name          string        `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Pvc           *Claim        `protobuf:"bytes,3,opt,name=pvc" json:"pvc,omitempty"`
}

func (m *ProvisionRequest) Reset()                    { *m = ProvisionRequest{} }
func (m *ProvisionRequest) String() string            { return proto.CompactTextString(m) }
func (*ProvisionRequest) ProtoMessage()               {}
func (*ProvisionRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *ProvisionRequest) GetReclaimPolicy() ReclaimPolicy {
	if m != nil {
		return m.ReclaimPolicy
	}
	return ReclaimPolicy_RECLAIM_POLICY_UNKNOWN
}

func (m *ProvisionRequest) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *ProvisionRequest) GetPvc() *Claim {
	if m != nil {
		return m.Pvc
	}
	return nil
}

// ProvisionResponse kind of matches
// k8s.io/client-go/pkg/api/v1.PersistentVolumeSpec
type ProvisionResponse struct {
	Capacity      uint64        `protobuf:"varint,1,opt,name=capacity" json:"capacity,omitempty"`
	Source        *Source       `protobuf:"bytes,2,opt,name=source" json:"source,omitempty"`
	AccessModes   []AccessMode  `protobuf:"varint,3,rep,packed,name=accessModes,enum=api.AccessMode" json:"accessModes,omitempty"`
	ReclaimPolicy ReclaimPolicy `protobuf:"varint,4,opt,name=reclaimPolicy,enum=api.ReclaimPolicy" json:"reclaimPolicy,omitempty"`
}

func (m *ProvisionResponse) Reset()                    { *m = ProvisionResponse{} }
func (m *ProvisionResponse) String() string            { return proto.CompactTextString(m) }
func (*ProvisionResponse) ProtoMessage()               {}
func (*ProvisionResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *ProvisionResponse) GetCapacity() uint64 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *ProvisionResponse) GetSource() *Source {
	if m != nil {
		return m.Source
	}
	return nil
}

func (m *ProvisionResponse) GetAccessModes() []AccessMode {
	if m != nil {
		return m.AccessModes
	}
	return nil
}

func (m *ProvisionResponse) GetReclaimPolicy() ReclaimPolicy {
	if m != nil {
		return m.ReclaimPolicy
	}
	return ReclaimPolicy_RECLAIM_POLICY_UNKNOWN
}

type DeleteRequest struct {
}

func (m *DeleteRequest) Reset()                    { *m = DeleteRequest{} }
func (m *DeleteRequest) String() string            { return proto.CompactTextString(m) }
func (*DeleteRequest) ProtoMessage()               {}
func (*DeleteRequest) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

type DeleteResponse struct {
}

func (m *DeleteResponse) Reset()                    { *m = DeleteResponse{} }
func (m *DeleteResponse) String() string            { return proto.CompactTextString(m) }
func (*DeleteResponse) ProtoMessage()               {}
func (*DeleteResponse) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func init() {
	proto.RegisterType((*ResourceRequirements)(nil), "api.ResourceRequirements")
	proto.RegisterType((*ClaimSpec)(nil), "api.ClaimSpec")
	proto.RegisterType((*ClaimStatus)(nil), "api.ClaimStatus")
	proto.RegisterType((*Claim)(nil), "api.Claim")
	proto.RegisterType((*Volume)(nil), "api.Volume")
	proto.RegisterType((*NFSVolumeSource)(nil), "api.NFSVolumeSource")
	proto.RegisterType((*Source)(nil), "api.Source")
	proto.RegisterType((*ProvisionRequest)(nil), "api.ProvisionRequest")
	proto.RegisterType((*ProvisionResponse)(nil), "api.ProvisionResponse")
	proto.RegisterType((*DeleteRequest)(nil), "api.DeleteRequest")
	proto.RegisterType((*DeleteResponse)(nil), "api.DeleteResponse")
	proto.RegisterEnum("api.ReclaimPolicy", ReclaimPolicy_name, ReclaimPolicy_value)
	proto.RegisterEnum("api.AccessMode", AccessMode_name, AccessMode_value)
	proto.RegisterEnum("api.ClaimPhase", ClaimPhase_name, ClaimPhase_value)
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for AgentService service

type AgentServiceClient interface {
	Provision(ctx context.Context, in *ProvisionRequest, opts ...grpc.CallOption) (*ProvisionResponse, error)
	Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error)
}

type agentServiceClient struct {
	cc *grpc.ClientConn
}

func NewAgentServiceClient(cc *grpc.ClientConn) AgentServiceClient {
	return &agentServiceClient{cc}
}

func (c *agentServiceClient) Provision(ctx context.Context, in *ProvisionRequest, opts ...grpc.CallOption) (*ProvisionResponse, error) {
	out := new(ProvisionResponse)
	err := grpc.Invoke(ctx, "/api.AgentService/Provision", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *agentServiceClient) Delete(ctx context.Context, in *DeleteRequest, opts ...grpc.CallOption) (*DeleteResponse, error) {
	out := new(DeleteResponse)
	err := grpc.Invoke(ctx, "/api.AgentService/Delete", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for AgentService service

type AgentServiceServer interface {
	Provision(context.Context, *ProvisionRequest) (*ProvisionResponse, error)
	Delete(context.Context, *DeleteRequest) (*DeleteResponse, error)
}

func RegisterAgentServiceServer(s *grpc.Server, srv AgentServiceServer) {
	s.RegisterService(&_AgentService_serviceDesc, srv)
}

func _AgentService_Provision_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProvisionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).Provision(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AgentService/Provision",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).Provision(ctx, req.(*ProvisionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _AgentService_Delete_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(AgentServiceServer).Delete(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.AgentService/Delete",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(AgentServiceServer).Delete(ctx, req.(*DeleteRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _AgentService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.AgentService",
	HandlerType: (*AgentServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Provision",
			Handler:    _AgentService_Provision_Handler,
		},
		{
			MethodName: "Delete",
			Handler:    _AgentService_Delete_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api.proto",
}

func init() { proto.RegisterFile("api.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 693 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xac, 0x54, 0x4d, 0x6f, 0xd3, 0x40,
	0x10, 0xad, 0xe3, 0xd4, 0xc4, 0x63, 0x9a, 0x98, 0x69, 0x29, 0x21, 0x42, 0xa8, 0x32, 0x42, 0x8a,
	0x7a, 0xa8, 0xd4, 0x20, 0x04, 0xea, 0xcd, 0x75, 0x4c, 0x1b, 0x48, 0xec, 0x68, 0x9d, 0xb6, 0xca,
	0x29, 0x32, 0xee, 0x42, 0x2d, 0x25, 0xb6, 0xeb, 0x75, 0x22, 0xf5, 0x00, 0x7f, 0x83, 0x1b, 0xff,
	0x85, 0x7f, 0x86, 0xbc, 0xde, 0x3a, 0x1f, 0x20, 0xd1, 0x03, 0xb7, 0x9d, 0x37, 0xe3, 0xd9, 0xf7,
	0x66, 0xde, 0x1a, 0x54, 0x3f, 0x09, 0x8f, 0x92, 0x34, 0xce, 0x62, 0x94, 0xfd, 0x24, 0x34, 0x3e,
	0xc2, 0x1e, 0xa1, 0x2c, 0x9e, 0xa7, 0x01, 0x25, 0xf4, 0x76, 0x1e, 0xa6, 0x74, 0x46, 0xa3, 0x8c,
	0xe1, 0x3e, 0x28, 0xd3, 0x70, 0x16, 0x66, 0xac, 0x29, 0x1d, 0x48, 0xed, 0x2a, 0x11, 0x11, 0xb6,
	0xa0, 0x96, 0xd2, 0xdb, 0x39, 0x65, 0x19, 0x6b, 0x56, 0x78, 0xa6, 0x8c, 0x8d, 0x1f, 0x12, 0xa8,
	0xd6, 0xd4, 0x0f, 0x67, 0x5e, 0x42, 0x03, 0x3c, 0x06, 0xcd, 0x0f, 0x02, 0xca, 0xd8, 0x20, 0xbe,
	0xa6, 0x79, 0x1b, 0xb9, 0x5d, 0xef, 0x34, 0x8e, 0xf2, 0xfb, 0xcd, 0x12, 0x27, 0xab, 0x35, 0xf8,
	0x0e, 0xd4, 0x54, 0x90, 0x61, 0x4d, 0xf9, 0x40, 0x6a, 0x6b, 0x9d, 0xe7, 0xfc, 0x83, 0xbf, 0x51,
	0x24, 0xcb, 0x5a, 0x7c, 0x09, 0xb0, 0x88, 0xa7, 0xf3, 0x19, 0x75, 0xfc, 0x19, 0x6d, 0x56, 0x0f,
	0xa4, 0xb6, 0x4a, 0x56, 0x10, 0xe3, 0xa7, 0x04, 0x5a, 0xc1, 0x2c, 0xf3, 0xb3, 0x39, 0xc3, 0xd7,
	0xb0, 0x9d, 0xdc, 0xf8, 0x8c, 0x72, 0x71, 0xf7, 0xac, 0x78, 0xc1, 0x30, 0x87, 0x49, 0x91, 0xdd,
	0x94, 0x50, 0x79, 0x80, 0x84, 0xb7, 0x50, 0x0b, 0xfc, 0xc4, 0x0f, 0xc2, 0xec, 0xee, 0xdf, 0x0a,
	0xca, 0x52, 0xe3, 0x02, 0xb6, 0xf9, 0xf5, 0x68, 0x40, 0x95, 0x25, 0x34, 0xe0, 0xc4, 0xb4, 0x4e,
	0x7d, 0x49, 0x2c, 0x9f, 0x29, 0xe1, 0x39, 0x6c, 0x83, 0xc2, 0xb8, 0x0e, 0xbe, 0x01, 0xad, 0xa3,
	0xaf, 0x54, 0x71, 0x9c, 0x88, 0xbc, 0x71, 0x09, 0xca, 0x25, 0x9f, 0xc2, 0x7f, 0xee, 0x3b, 0x86,
	0x86, 0xf3, 0xc1, 0x2b, 0x5a, 0x7b, 0x5c, 0x57, 0x6e, 0x18, 0x46, 0xd3, 0x05, 0x4d, 0xf9, 0x15,
	0x2a, 0x11, 0x11, 0x22, 0x54, 0x13, 0x3f, 0xbb, 0xe1, 0x2d, 0x55, 0xc2, 0xcf, 0x85, 0x89, 0xfc,
	0x6b, 0x37, 0x9a, 0x16, 0x43, 0xaa, 0x91, 0x32, 0x36, 0x4e, 0x40, 0x11, 0x1d, 0xdb, 0x20, 0x47,
	0x5f, 0x98, 0x60, 0xbc, 0xc7, 0xb9, 0x6c, 0x5c, 0x7a, 0xbe, 0x45, 0xf2, 0x92, 0x53, 0x05, 0xaa,
	0xd9, 0x5d, 0x42, 0x8d, 0xef, 0xa0, 0x0f, 0xd3, 0x78, 0x11, 0xb2, 0x30, 0x8e, 0x48, 0xe1, 0x4a,
	0x7c, 0x0f, 0x3b, 0x29, 0x0d, 0xf8, 0x6a, 0xe3, 0x69, 0x18, 0xdc, 0x89, 0x95, 0xa3, 0xd8, 0xca,
	0x4a, 0x86, 0xac, 0x17, 0xe6, 0xcc, 0xa3, 0xdc, 0x4e, 0x82, 0x79, 0x7e, 0xc6, 0x17, 0x20, 0x27,
	0x8b, 0x40, 0x6c, 0x16, 0x96, 0xf3, 0x21, 0x39, 0x6c, 0xfc, 0x92, 0xe0, 0xc9, 0x0a, 0x01, 0x96,
	0xc4, 0x11, 0xa3, 0xb9, 0xda, 0xd2, 0x12, 0xc5, 0x63, 0x2a, 0x63, 0x7c, 0x05, 0x4a, 0xe1, 0x0b,
	0x31, 0x72, 0x8d, 0xb7, 0x2c, 0xd4, 0x11, 0x91, 0xda, 0xb4, 0xa1, 0xfc, 0x00, 0x1b, 0xfe, 0xa1,
	0xba, 0xfa, 0x40, 0xd5, 0x46, 0x03, 0x76, 0xba, 0x74, 0x4a, 0x33, 0x2a, 0x06, 0x68, 0xe8, 0x50,
	0xbf, 0x07, 0x0a, 0x41, 0x87, 0x43, 0xd8, 0x59, 0x6b, 0x81, 0x2d, 0xd8, 0x27, 0xb6, 0xd5, 0x37,
	0x7b, 0x83, 0xc9, 0xd0, 0xed, 0xf7, 0xac, 0xf1, 0xe4, 0xc2, 0xf9, 0xe4, 0xb8, 0x57, 0x8e, 0xbe,
	0x85, 0x1a, 0x3c, 0x22, 0xb6, 0x35, 0xb6, 0xfa, 0xb6, 0x2e, 0x21, 0x80, 0xd2, 0xb5, 0xfb, 0xf6,
	0xc8, 0xd6, 0x2b, 0xf9, 0x99, 0xd8, 0x23, 0xb3, 0xe7, 0xe8, 0xf2, 0xe1, 0x35, 0xc0, 0x52, 0x09,
	0x36, 0x61, 0xcf, 0xb4, 0x2c, 0xcb, 0xf6, 0xbc, 0xc9, 0xc0, 0xed, 0xda, 0x2b, 0xcd, 0x76, 0xa1,
	0x41, 0x6c, 0xb3, 0x3b, 0xb9, 0x22, 0xbd, 0x91, 0x3d, 0x71, 0x1d, 0x2b, 0x6f, 0x8a, 0x50, 0xe7,
	0xa0, 0xeb, 0xf4, 0xc7, 0x93, 0x81, 0xe9, 0x8c, 0xf5, 0xca, 0x46, 0x21, 0x07, 0xe5, 0xc3, 0x33,
	0x80, 0xe5, 0x1b, 0xc7, 0x67, 0xb0, 0x2b, 0x28, 0x9f, 0x9b, 0x9e, 0xbd, 0xce, 0x78, 0x68, 0x3b,
	0xdd, 0x9e, 0x73, 0xa6, 0x4b, 0xa8, 0xc2, 0xf6, 0xa9, 0x7b, 0xe1, 0x74, 0xf5, 0x0a, 0xd6, 0xa0,
	0xda, 0x77, 0xbd, 0x91, 0x2e, 0x77, 0xbe, 0xc1, 0x63, 0xf3, 0x2b, 0x8d, 0x32, 0x8f, 0xa6, 0x8b,
	0x30, 0xa0, 0x78, 0x02, 0x6a, 0xb9, 0x76, 0x7c, 0xca, 0x67, 0xbc, 0xe9, 0xc3, 0xd6, 0xfe, 0x26,
	0x2c, 0xdc, 0x71, 0x0c, 0x4a, 0x31, 0x5e, 0x2c, 0x96, 0xb3, 0x36, 0xfc, 0xd6, 0xee, 0x1a, 0x56,
	0x7c, 0xf2, 0x59, 0xe1, 0xff, 0xef, 0x37, 0xbf, 0x03, 0x00, 0x00, 0xff, 0xff, 0x41, 0x34, 0x71,
	0xa1, 0xcc, 0x05, 0x00, 0x00,
}
